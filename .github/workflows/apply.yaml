name: Terraform Workflow

on:
    push:
        branches:
            - main
        paths:
            - 'terraform/**'
            - '.github/workflows/**'
            - '!**/README.md'
    pull_request:
        branches:
            - main
        paths:
            - 'terraform/**'
            - '.github/workflows/**'
            - '!**/README.md'

    workflow_dispatch:
        inputs:
            destroy:
                description: 'Destroy the infrastructure'
                type: boolean
                required: true
                default: false

jobs:
    terraform:
        runs-on: ubuntu-latest
        defaults:
            run:
                shell: bash
                working-directory: ./terraform
        
        env:
            AIRFLOW_SSH_KEY_PRIVATE: ${{ secrets.AIRFLOW_SSH_KEY_PRIVATE }}

        permissions:
            contents: 'read'
            id-token: 'write'
            pull-requests: 'write'
    
        steps:
        - name: Checkout code
          uses: actions/checkout@v4
        
        - id: 'auth'
          name: 'Authenticate to Google Cloud'
          uses: 'google-github-actions/auth@v1'
          with:
            # Replace with values from setup.sh
            workload_identity_provider: 'projects/734911192367/locations/global/workloadIdentityPools/deb-pool/providers/github-actions'
            service_account: 'deb-sa@wizeline-deb.iam.gserviceaccount.com'
    
        - name: Setup Terraform
          uses: hashicorp/setup-terraform@v2
          with: 
            terraform_version: '1.5.7'
            terraform_wrapper: true
    
        - name: Terraform Init
          id: init
          run: terraform init
    
        - name: Terraform Format
          id: fmt
          run: terraform fmt -check
    
        - name: Terraform Validate
          id: validate
          run: terraform validate
    
        - name: Terraform Plan
          id: plan
          run: |
            terraform plan \
            -var="airflow_ssh_key_private=${{ env.AIRFLOW_SSH_KEY_PRIVATE }}" \
            -no-color \
            -input=false
          continue-on-error: true
        
        # Add a comment to pull requests with plan results
        - name: Add Plan Comment
          if: github.event_name == 'pull_request'
          uses: actions/github-script@v6
          env:
            PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
          with:
            github-token: ${{ secrets.GITHUB_TOKEN }}
            script: |
              // 1. Retrieve existing bot comments for the PR
              const { data: comments } = await github.rest.issues.listComments({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
              })
              const botComment = comments.find(comment => {
                return comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Style')
              })

              // 2. Prepare format of the comment
              const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
              #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
              #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
              <details><summary>Validation Output</summary>

              \`\`\`\n
              ${{ steps.validate.outputs.stdout }}
              \`\`\`

              </details>

              #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

              <details><summary>Show Plan</summary>

              \`\`\`\n
              ${process.env.PLAN}
              \`\`\`

              </details>

              *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;

              // 3. If we have a comment, update it, otherwise create a new one
              if (botComment) {
                github.rest.issues.updateComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  comment_id: botComment.id,
                  body: output
                })
              } else {
                github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: output
                })
              }

        - name: Terraform Apply
          if: github.ref == 'refs/heads/"main"' && github.event_name == 'push' 
          run: |
            terraform apply \
            -var="airflow_ssh_key_private=${{ env.AIRFLOW_SSH_KEY_PRIVATE }}" \
            -input=false \
            -auto-approve 
    
        - name: Terraform Destroy (Manual Trigger)
          if: github.event_name == 'workflow_dispatch' && github.ref == 'refs/heads/main' && github.event.inputs.destroy == 'true'
          run: terraform destroy -auto-approve